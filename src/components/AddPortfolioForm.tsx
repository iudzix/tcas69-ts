"use client";  

import React from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { usePortfolioStore } from '@/store/portfolioStore'; 
import { StudentPortfolio } from '@/store/portfolioStore';

// 1. üü¢ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Validation Schema: ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô specialSkills ‡πÅ‡∏•‡∏∞ photos) üü¢
const FormSchema = z.object({
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß: REQUIRED
  name: z.string().min(1, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠"),
  lastName: z.string().min(1, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•"), 
  address: z.string().min(5, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"), 
  phone: z.string().min(10, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå 10 ‡∏´‡∏•‡∏±‡∏Å"), 
  school: z.string().min(1, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô"), 
  
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤/‡∏™‡∏°‡∏±‡∏Ñ‡∏£: REQUIRED
  gpa: z.coerce.number()
    .min(0.0, "GPA ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏•‡∏ö")
    .max(4.0, "GPA ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 4.0"),
    
  reason: z.string().min(20, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 20 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£"), 
  major: z.string().min(1, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"),
  university: z.string().min(1, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢"), 
  
  // üü¢ ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô üü¢
  specialSkills: z.string().optional(), // OPTIONAL: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¥‡πÄ‡∏®‡∏©
  photos: z
  .array(z.string().url())
  .optional()
});

type FormFields = z.infer<typeof FormSchema>;



// ... (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô handleImageUpload ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ...
const handleImageUpload = (fileList: FileList | undefined): Promise<string[]> => {
    // NOTE: ‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡πâ‡∏î handleImageUpload ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
    if (!fileList || fileList.length === 0) return Promise.resolve([]);
    const filesArray = Array.from(fileList);
    return Promise.all(
        filesArray.map(file => {
            return new Promise<string>((resolve, reject) => {
                const reader = new FileReader();
                reader.onloadend = () => {
                    if (typeof reader.result === 'string') {
                        resolve(reader.result);
                    } else {
                        reject(new Error("Failed to read file as Data URL."));
                    }
                };
                reader.onerror = () => { reject(reader.error); };
                reader.readAsDataURL(file); 
            });
        })
    );
};


const AddPortfolioForm = () => {
  const addStudent = usePortfolioStore((state) => state.addStudent);
  
  const { 
    register, 
    handleSubmit, 
    reset,
    formState: { errors } 
  } = useForm<FormFields>({
    resolver: zodResolver(FormSchema) as unknown as import("react-hook-form").Resolver<FormFields>,

  });

  const onSubmit = async (data: FormFields) => {
    const fileList = data.photos as unknown as FileList;
    const photosBase64 = await handleImageUpload(fileList);
    
    const studentData = {
      ...data, 
      gpa: parseFloat(data.gpa as unknown as string),
      photos: photosBase64,
    };
    
    addStudent(studentData as StudentPortfolio);
    alert('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Portfolio ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!');
    reset(); 
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="p-6 max-w-lg mx-auto bg-white shadow-md rounded-lg">
      <h2 className="text-2xl font-bold mb-4 text-center">‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏° Portfolio</h2>

      {/* üü¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß üü¢ */}
      <div className="grid grid-cols-2 gap-4">
        <div className="mb-4">
          <label className="block text-gray-700">‡∏ä‡∏∑‡πà‡∏≠ *</label>
          <input {...register("name")} className="w-full p-2 border rounded" />
          {errors.name && <p className="text-red-500 text-sm">{errors.name.message}</p>}
        </div>
        <div className="mb-4">
          <label className="block text-gray-700">‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• *</label>
          <input {...register("lastName")} className="w-full p-2 border rounded" />
          {errors.lastName && <p className="text-red-500 text-sm">{errors.lastName.message}</p>}
        </div>
      </div>

      <div className="mb-4">
        <label className="block text-gray-700">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå *</label>
        <input type="tel" {...register("phone")} className="w-full p-2 border rounded" />
        {errors.phone && <p className="text-red-500 text-sm">{errors.phone.message}</p>}
      </div>

      <div className="mb-4">
        <label className="block text-gray-700">‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô *</label>
        <input {...register("school")} className="w-full p-2 border rounded" />
        {errors.school && <p className="text-red-500 text-sm">{errors.school.message}</p>}
      </div>

      <div className="mb-4">
        <label className="block text-gray-700">‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà *</label>
        <textarea {...register("address")} className="w-full p-2 border rounded" rows={2}></textarea>
        {errors.address && <p className="text-red-500 text-sm">{errors.address.message}</p>}
      </div>
      
      {/* üü¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤/‡∏™‡∏°‡∏±‡∏Ñ‡∏£ üü¢ */}
      <div className="mb-4">
        <label className="block text-gray-700">GPA *</label>
        <input type="number" step="0.01" {...register("gpa")} className="w-full p-2 border rounded" />
        {errors.gpa && <p className="text-red-500 text-sm">{errors.gpa.message}</p>}
      </div>
      
      <div className="mb-4">
        <label className="block text-gray-700">‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å *</label>
        <input {...register("university")} className="w-full p-2 border rounded" />
        {errors.university && <p className="text-red-500 text-sm">{errors.university.message}</p>}
      </div>

      <div className="mb-4">
        <label className="block text-gray-700">‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å *</label>
        <input {...register("major")} className="w-full p-2 border rounded" />
        {errors.major && <p className="text-red-500 text-sm">{errors.major.message}</p>}
      </div>

      <div className="mb-4">
        <label className="block text-gray-700">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¥‡πÄ‡∏®‡∏© (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)</label>
        <textarea {...register("specialSkills")} className="w-full p-2 border rounded" rows={2}></textarea>
      </div>

      <div className="mb-4">
        <label className="block text-gray-700">‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏™‡∏≤‡∏Ç‡∏≤‡∏ô‡∏µ‡πâ *</label>
        <textarea {...register("reason")} className="w-full p-2 border rounded" rows={3}></textarea>
        {errors.reason && <p className="text-red-500 text-sm">{errors.reason.message}</p>}
      </div>
      
      {/* üü¢ Upload ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û üü¢ */}
      <div className="mb-4">
        <label className="block text-gray-700">‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)</label>
        <input type="file" accept="image/*" multiple {...register("photos")} className="w-full p-2 border rounded" />
      </div>

      <button type="submit" className="w-full bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
        ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Portfolio
      </button>
    </form>
  );
};

export default AddPortfolioForm;