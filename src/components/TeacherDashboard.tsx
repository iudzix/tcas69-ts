"use client"; 

import React, { useState, useMemo } from 'react';
import Link from 'next/link';
import { usePortfolioStore } from '@/store/portfolioStore';

interface StudentPortfolio {
  id: string;
  name: string;
  lastName: string; // ‡πÄ‡∏û‡∏¥‡πà‡∏°
  address: string; // ‡πÄ‡∏û‡∏¥‡πà‡∏°
  phone: string; // ‡πÄ‡∏û‡∏¥‡πà‡∏°
  school: string; // ‡πÄ‡∏û‡∏¥‡πà‡∏°
  gpa: number;
  specialSkills: string; // ‡πÄ‡∏û‡∏¥‡πà‡∏°
  reason: string; // ‡πÄ‡∏û‡∏¥‡πà‡∏°
  major: string;
  university: string; // ‡πÄ‡∏û‡∏¥‡πà‡∏°
  photos: string[]; 
}

// Type ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ
type SortableColumn = 'name' | 'gpa';

const TeacherDashboard = () => {
  const students = usePortfolioStore((state) => state.students) as StudentPortfolio[];
  // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 'name')
  const [sortBy, setSortBy] = useState<SortableColumn>('name');
  // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 'asc')
  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc'); 

  // 1. Logic ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö: ‡πÉ‡∏ä‡πâ useMemo ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠ students, sortBy ‡∏´‡∏£‡∏∑‡∏≠ sortDirection ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
  const sortedStudents = useMemo(() => {
    return [...students].sort((a, b) => {
      let aValue: any = a[sortBy];
      let bValue: any = b[sortBy];

      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ä‡∏∑‡πà‡∏≠ ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏£‡∏ß‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°
      if (sortBy === 'name') {
          aValue = `${a.name} ${a.lastName}`;
          bValue = `${b.name} ${b.lastName}`;
      }
      
      let comparison = 0;
      
      if (typeof aValue === 'string' && typeof bValue === 'string') {
          // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÑ‡∏ó‡∏¢
          comparison = aValue.localeCompare(bValue, 'th', { sensitivity: 'base' });
      } else if (typeof aValue === 'number' && typeof bValue === 'number') {
          // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (GPA)
          comparison = aValue - bValue;
      }

      // ‡∏õ‡∏£‡∏±‡∏ö‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ï‡∏≤‡∏° sortDirection
      return sortDirection === 'asc' ? comparison : comparison * -1;
    });
  }, [students, sortBy, sortDirection]);

  // 2. Function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà Header ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
  const handleSort = (column: SortableColumn) => {
    if (sortBy === column) {
      // ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ã‡πâ‡∏≥: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
    } else {
      // ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡∏°‡πà: ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà 'asc'
      setSortBy(column);
      setSortDirection('asc');
    }
  };
  
  // 3. Function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á Icon ‡∏ö‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  const getSortIcon = (column: SortableColumn) => {
    if (sortBy !== column) return ' ‚ÜïÔ∏è'; // ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏á
    return sortDirection === 'asc' ? ' ‚¨ÜÔ∏è' : ' ‚¨áÔ∏è'; // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÑ‡∏õ‡∏°‡∏≤‡∏Å ‡∏´‡∏£‡∏∑‡∏≠ ‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢
  };

  return (
    // ‡∏à‡∏±‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏à‡∏≠‡∏î‡πâ‡∏ß‡∏¢ max-w-5xl mx-auto
    <div className="p-8 max-w-5xl mx-auto"> 
      <h1 className="text-3xl font-bold mb-6 text-center">‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå: ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£</h1>
      
      <table className="min-w-full bg-white border border-gray-200 shadow-lg rounded-lg">
        <thead>
          <tr className="bg-gray-100">
            {/* üí° TH ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•: ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô onClick ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö */}
            <th 
              className="py-3 px-4 border-b cursor-pointer hover:bg-gray-200 text-left"
              onClick={() => handleSort('name')}
            >
              ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• {getSortIcon('name')}
            </th>
            {/* üí° TH ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö GPA: ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô onClick ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö */}
            <th 
              className="py-3 px-4 border-b cursor-pointer hover:bg-gray-200 text-center"
              onClick={() => handleSort('gpa')}
            >
              GPA {getSortIcon('gpa')}
            </th>
            <th className="py-3 px-4 border-b text-center">‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</th>
            <th className="py-3 px-4 border-b">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</th>
          </tr>
        </thead>
        <tbody>
          {sortedStudents.map((student) => (
            <tr key={student.id} className="hover:bg-gray-50 border-b">
              <td className="py-2 px-4">{student.name} {student.lastName}</td>
              <td className="py-2 px-4 text-center text-green-600 font-medium">{student.gpa.toFixed(2)}</td>
              <td className="py-2 px-4 text-center">{student.major}</td>
              <td className="py-2 px-4 text-center">
                <Link 
                  href={`/dashboard/${student.id}`} 
                  className="text-blue-500 hover:underline"
                >
                  ‡∏î‡∏π Portfolio
                </Link>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
      {students.length === 0 && (
        <p className="text-center mt-6 text-xl text-gray-500">
            ‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
        </p>
      )}
    </div>
  );
};

export default TeacherDashboard;